services:
  # This is the name of the container where our code
  # is going to run. The key can be anything. Note that this
  # key will be the name of this image on the network that docker-compose
  # creates, so make it explicit and obvious.
  %REPO%:
    # This is the image where our app runs. image: is a keyword. The value
    # is the name of a Docker image, and likely in the format ACCOUNT/REPO:TAG
    image: %ACCOUNT%/%REPO%:%TAG%

    user: %USER%

    # This tells Docker what to do when starting up. In the case of our app, we don't
    # want it to pull from a registry unless it's not here.
    pull_policy: "missing"

    # This says that our app should not start up until the DB and Redis instances
    # are up.  Ideally we'd use "service_healthy" which says to wait for the services to
    # pass a health check, but neither Postgres nor Redis docker images configure one.
    # So, we'll use "service_started" instead. Note that the keys inside depends_on:
    # must match the service names used after our app's stanza below, i.e. db: and redis:
    depends_on:
      db:
        condition: "service_started"

    # The Docker documentation is unclear as to what this does, but it seems to speed up
    # shutdown of the overall system.
    init: true
    # This maps the port we've exposed from inside
    # the Docker container to the given local
    # port on our host, i.e. requests to our
    # localhost for LOCAL_PORT will be served
    # by whatever is running in the container on EXPOSE
    ports:
      - "%LOCAL_PORT%:%EXPOSE%"
      - "22:22"

    # This maps the WORKDIR directory inside the Docker
    # container to our hosts directory, VOLUME_SOURCE
    # which is what allows us to share files between
    # our computer and the Docker container.
    #
    # The "delegated" consistency should make disk access faster
    # on macOS. This will cache reads and writes making the container
    # authoritative, so your computer will be behind, but not by much
    volumes:
      - type: bind
        source: "%VOLUME_SOURCE%"
        target: "%WORKDIR%"
        consistency: "delegated"
    entrypoint: %HOMEDIR%/docker-entrypoint.sh
    # entrypoint: /root/docker-entrypoint.sh
  # This creates a SECOND container
  # called "db" that will run Postgres.
  # This value here (db) will be the name
  # of the computer from the perspective of
  # the other Docker container, meaning
  # if we want to make a DB connection
  # to the Postgres running here, we'd
  # use the hostname db to do it
  db:
    image: postgres:15-alpine
    # We don't want to pull this big image every time
    pull_policy: "missing"
    # In Postgres 15, there is no default value for the password.
    # Since we're using this for dev, we need to set it
    # and it doesn't matter if it's 'secure', so we'll use
    # "postgres" as the password
    environment:
      POSTGRES_PASSWORD: postgres
# vim: ft=yaml nospell
